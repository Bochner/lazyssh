name: Project Board Automation (v2)

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, reopened, labeled, unlabeled, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues and PRs to project board'
        required: false
        default: false
        type: boolean
      issue_number:
        description: 'Specific issue number to process (optional)'
        required: false
        type: string
      pr_number:
        description: 'Specific PR number to process (optional)'
        required: false
        type: string
      project_number:
        description: 'Project number to use (defaults to first available)'
        required: false
        type: string
      discover_projects:
        description: 'List all available projects (for debugging)'
        required: false
        default: false
        type: boolean

env:
  PROJECT_NAME: "LazySSH Development"

jobs:
  discover-projects:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.discover_projects == 'true'
    steps:
      - name: List all available projects
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner } = context.repo;
            
            // Check if owner is a user or organization
            let isUser = false;
            let isOrg = false;
            
            // Try to fetch as user first
            try {
              const userQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    id
                    projectsV2(first: 20) {
                      nodes {
                        id
                        title
                        number
                        url
                      }
                    }
                  }
                }
              `;
              const userResult = await github.graphql(userQuery, { owner });
              if (userResult.user) {
                isUser = true;
                console.log(`Found user account: ${owner}`);
                console.log('Available Projects:');
                console.log('==================');
                
                if (userResult.user.projectsV2.nodes.length === 0) {
                  console.log('No projects found. You need to create one manually.');
                } else {
                  userResult.user.projectsV2.nodes.forEach(project => {
                    console.log(`#${project.number}: ${project.title}`);
                    console.log(`   URL: ${project.url}`);
                  });
                }
              }
            } catch (error) {
              console.log(`Not a user account: ${error.message}`);
            }
            
            // If not a user, try as organization
            if (!isUser) {
              try {
                const orgQuery = `
                  query($owner: String!) {
                    organization(login: $owner) {
                      id
                      projectsV2(first: 20) {
                        nodes {
                          id
                          title
                          number
                          url
                        }
                      }
                    }
                  }
                `;
                const orgResult = await github.graphql(orgQuery, { owner });
                if (orgResult.organization) {
                  isOrg = true;
                  console.log(`Found organization account: ${owner}`);
                  console.log('Available Projects:');
                  console.log('==================');
                  
                  if (orgResult.organization.projectsV2.nodes.length === 0) {
                    console.log('No projects found. You need to create one manually.');
                  } else {
                    orgResult.organization.projectsV2.nodes.forEach(project => {
                      console.log(`#${project.number}: ${project.title}`);
                      console.log(`   URL: ${project.url}`);
                    });
                  }
                }
              } catch (error) {
                console.log(`Not an organization account: ${error.message}`);
              }
            }
            
            if (!isUser && !isOrg) {
              console.log(`Could not find user or organization: ${owner}`);
            }

  update-project-board:
    runs-on: ubuntu-latest
    steps:
      - name: Get Project ID
        id: get-project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = context.payload.inputs?.project_number || 1;
            
            // First, check if owner is a user or organization
            let ownerResult = { user: null, organization: null };
            let isUser = false;
            let isOrg = false;
            
            // Try to fetch as user first
            try {
              const userQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    id
                    __typename
                  }
                }
              `;
              const userResult = await github.graphql(userQuery, {
                owner: context.repo.owner
              });
              if (userResult.user) {
                ownerResult.user = userResult.user;
                isUser = true;
              }
            } catch (error) {
              console.log(`Not a user account: ${error.message}`);
            }
            
            // If not a user, try as organization
            if (!isUser) {
              try {
                const orgQuery = `
                  query($owner: String!) {
                    organization(login: $owner) {
                      id
                      __typename
                    }
                  }
                `;
                const orgResult = await github.graphql(orgQuery, {
                  owner: context.repo.owner
                });
                if (orgResult.organization) {
                  ownerResult.organization = orgResult.organization;
                  isOrg = true;
                }
              } catch (error) {
                console.log(`Not an organization account: ${error.message}`);
              }
            }
            
            console.log(`Owner ${context.repo.owner} is: ${isUser ? 'User' : 'Organization'}`);
            
            // Query project based on owner type
            let project = null;
            
            if (isUser) {
              const userQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(userQuery, {
                  owner: context.repo.owner,
                  number: parseInt(projectNumber)
                });
                project = result.user?.projectV2;
              } catch (error) {
                console.log(`Error querying user project: ${error.message}`);
              }
            }
            
            if (isOrg && !project) {
              const orgQuery = `
                query($owner: String!, $number: Int!) {
                  organization(login: $owner) {
                    projectV2(number: $number) {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(orgQuery, {
                  owner: context.repo.owner,
                  number: parseInt(projectNumber)
                });
                project = result.organization?.projectV2;
              } catch (error) {
                console.log(`Error querying organization project: ${error.message}`);
              }
            }
            
            if (!project) {
              console.log(`Project #${projectNumber} not found for ${context.repo.owner}`);
              console.log('Available projects can be viewed at: https://github.com/users/' + context.repo.owner + '/projects');
              console.log('');
              console.log('To fix this issue:');
              console.log('1. Go to https://github.com/users/' + context.repo.owner + '/projects');
              console.log('2. Create a new project (Project V2) named "LazySSH Development"');
              console.log('3. Add a "Status" field with these options:');
              console.log('   - 📥 Triage');
              console.log('   - 📋 Backlog'); 
              console.log('   - 🔨 In Progress');
              console.log('   - 👀 Review/Testing');
              console.log('   - 🚀 Ready to Merge');
              console.log('   - ✅ Done');
              console.log('4. Note the project number from the URL (e.g., if URL is /users/username/projects/3, the number is 3)');
              console.log('5. Update the workflow_dispatch input or create the project as #1');
              core.setOutput('project-found', 'false');
              return;
            }
            
            console.log(`Found project: ${project.title}`);
            
            // Find the Status field
            const statusField = project.fields.nodes.find(field => 
              field.name.toLowerCase() === 'status' || 
              field.name.toLowerCase() === 'column' ||
              field.name.toLowerCase() === 'state'
            );
            
            if (!statusField) {
              console.log('No Status field found in project');
              core.setOutput('project-found', 'false');
              return;
            }
            
            core.setOutput('project-found', 'true');
            core.setOutput('project-id', project.id);
            core.setOutput('status-field-id', statusField.id);
            core.setOutput('status-options', JSON.stringify(statusField.options || []));
            
            return {
              projectId: project.id,
              statusFieldId: statusField.id,
              statusOptions: statusField.options || []
            };

      - name: Add item to project
        id: add-item
        uses: actions/github-script@v7
        if: (github.event.action == 'opened' || github.event_name == 'workflow_dispatch') && steps.get-project.outputs.project-found == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = steps['get-project'].outputs['project-id'];
            const item = context.payload.issue || context.payload.pull_request;
            
            if (!item && github.event_name !== 'workflow_dispatch') {
              console.log('No item to process');
              return;
            }
            
            // For workflow_dispatch, handle specific issue/PR if provided
            let contentId = item?.node_id;
            let itemNumber = item?.number;
            
            if (github.event_name === 'workflow_dispatch') {
              const issueNumber = context.payload.inputs?.issue_number;
              const prNumber = context.payload.inputs?.pr_number;
              
              if (issueNumber) {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                contentId = issue.node_id;
                itemNumber = issue.number;
              } else if (prNumber) {
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });
                contentId = pr.node_id;
                itemNumber = pr.number;
              }
            }
            
            if (!contentId) {
              console.log('No content ID available');
              return;
            }
            
            // Check if item already exists in project
            const checkQuery = `
              query($projectId: ID!, $contentId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const checkResult = await github.graphql(checkQuery, {
              projectId,
              contentId
            });
            
            const existingItem = checkResult.node.items.nodes.find(
              item => item.content?.id === contentId
            );
            
            if (existingItem) {
              console.log(`Item #${itemNumber} already exists in project`);
              core.setOutput('item-id', existingItem.id);
              return { itemId: existingItem.id };
            }
            
            // Add item to project
            const addMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            
            const addResult = await github.graphql(addMutation, {
              projectId,
              contentId
            });
            
            const itemId = addResult.addProjectV2ItemById.item.id;
            console.log(`Added item #${itemNumber} to project`);
            core.setOutput('item-id', itemId);
            
            return { itemId };

      - name: Update item status
        uses: actions/github-script@v7
        if: steps.get-project.outputs.project-found == 'true' && (steps.add-item.outputs.item-id || github.event.action != 'opened')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = steps['get-project'].outputs['project-id'];
            const statusFieldId = steps['get-project'].outputs['status-field-id'];
            const statusOptions = JSON.parse(steps['get-project'].outputs['status-options']);
            
            let itemId = steps['add-item'].outputs['item-id'];
            
            const item = context.payload.issue || context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const action = context.payload.action;
            
            // If we don't have an item ID, find it in the project
            if (!itemId && item) {
              const findQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                            }
                            ... on PullRequest {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const findResult = await github.graphql(findQuery, { projectId });
              const foundItem = findResult.node.items.nodes.find(
                projectItem => projectItem.content?.number === item.number
              );
              
              if (foundItem) {
                itemId = foundItem.id;
                console.log(`Found existing item #${item.number} in project`);
              } else {
                console.log(`Item #${item.number} not found in project`);
                return;
              }
            }
            
            if (!itemId) {
              console.log('No item ID available');
              return;
            }
            
            // Determine target status based on action and labels
            let targetStatus = null;
            const labels = item?.labels?.map(label => label.name) || [];
            
            // Define status mapping
            const statusMap = {
              'triage': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('triage') || 
                opt.name.toLowerCase().includes('new')
              ),
              'backlog': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('backlog') || 
                opt.name.toLowerCase().includes('todo')
              ),
              'in_progress': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('progress') || 
                opt.name.toLowerCase().includes('doing') ||
                opt.name.toLowerCase().includes('development')
              ),
              'review': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('review') || 
                opt.name.toLowerCase().includes('testing')
              ),
              'ready_to_merge': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('ready') && 
                opt.name.toLowerCase().includes('merge')
              ),
              'done': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('done') || 
                opt.name.toLowerCase().includes('closed') ||
                opt.name.toLowerCase().includes('complete')
              )
            };
            
            // Determine target status based on event
            switch (action) {
              case 'opened':
                if (labels.includes('needs-triage')) {
                  targetStatus = statusMap.triage;
                } else if (labels.includes('ready-for-review')) {
                  targetStatus = statusMap.review;
                } else {
                  targetStatus = statusMap.backlog;
                }
                break;
                
              case 'closed':
                targetStatus = statusMap.done;
                break;
                
              case 'reopened':
                targetStatus = isIssue ? statusMap.backlog : statusMap.review;
                break;
                
              case 'labeled':
                if (labels.includes('work-in-progress')) {
                  targetStatus = statusMap.in_progress;
                } else if (labels.includes('ready-for-review')) {
                  targetStatus = statusMap.review;
                } else if (labels.includes('needs-triage')) {
                  targetStatus = statusMap.triage;
                }
                break;
                
              case 'assigned':
                targetStatus = statusMap.in_progress;
                break;
                
              case 'ready_for_review':
                targetStatus = statusMap.review;
                break;
                
              case 'converted_to_draft':
                targetStatus = statusMap.in_progress;
                break;
            }
            
            // Handle PR review events
            if (context.payload.review) {
              const review = context.payload.review;
              if (review.state === 'approved') {
                // Check if all required reviews are approved
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: item.number
                });
                
                const latestReviews = {};
                reviews.forEach(r => {
                  latestReviews[r.user.login] = r.state;
                });
                
                const hasApprovals = Object.values(latestReviews).some(state => state === 'APPROVED');
                const hasRequestedChanges = Object.values(latestReviews).some(state => state === 'CHANGES_REQUESTED');
                
                if (hasApprovals && !hasRequestedChanges) {
                  targetStatus = statusMap.ready_to_merge || statusMap.review;
                }
              } else if (review.state === 'changes_requested') {
                targetStatus = statusMap.in_progress;
              }
            }
            
            if (!targetStatus) {
              console.log('No target status determined');
              return;
            }
            
            // Update the item's status
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            await github.graphql(updateMutation, {
              projectId,
              itemId,
              fieldId: statusFieldId,
              optionId: targetStatus.id
            });
            
            console.log(`Updated item #${item.number} to status: ${targetStatus.name}`);

  create-project-board:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all != 'true'
    steps:
      - name: Create LazySSH project board (v2)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner } = context.repo;
            
            // Note: Creating a new Project v2 requires appropriate permissions
            // For personal repos, projects need to be created manually through the GitHub UI
            
            const createMutation = `
              mutation($ownerId: ID!, $title: String!) {
                createProjectV2(input: {
                  ownerId: $ownerId
                  title: $title
                }) {
                  projectV2 {
                    id
                    title
                  }
                }
              }
            `;
            
            // First, check if owner is a user or organization and get the ID
            let ownerId = null;
            let isUser = false;
            
            // Try to fetch as user first
            try {
              const userQuery = `
                query($login: String!) {
                  user(login: $login) {
                    id
                    __typename
                  }
                }
              `;
              const userResult = await github.graphql(userQuery, { login: owner });
              
              if (userResult.user) {
                ownerId = userResult.user.id;
                isUser = true;
                console.log(`Found user account: ${owner}`);
              }
            } catch (error) {
              console.log(`Not a user account: ${error.message}`);
            }
            
            // If not a user, try as organization
            if (!ownerId) {
              try {
                const orgQuery = `
                  query($login: String!) {
                    organization(login: $login) {
                      id
                      __typename
                    }
                  }
                `;
                const orgResult = await github.graphql(orgQuery, { login: owner });
                
                if (orgResult.organization) {
                  ownerId = orgResult.organization.id;
                  isUser = false;
                  console.log(`Found organization account: ${owner}`);
                }
              } catch (error) {
                console.log(`Not an organization account: ${error.message}`);
              }
            }
            
            if (!ownerId) {
              console.log(`Could not find user or organization: ${owner}`);
              console.log('Please create the project manually at: https://github.com/users/' + owner + '/projects');
              return;
            }
            
            try {
              const result = await github.graphql(createMutation, {
                ownerId,
                title: process.env.PROJECT_NAME
              });
              
              const projectId = result.createProjectV2.projectV2.id;
              console.log(`Created project: ${result.createProjectV2.projectV2.title}`);
              
              // Add Status field with predefined options
              const addFieldMutation = `
                mutation($projectId: ID!, $name: String!, $options: [ProjectV2SingleSelectFieldOptionInput!]!) {
                  createProjectV2Field(input: {
                    projectId: $projectId
                    dataType: SINGLE_SELECT
                    name: $name
                    singleSelectOptions: $options
                  }) {
                    projectV2Field {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              `;
              
              const statusOptions = [
                { name: "📥 Triage", color: "GRAY" },
                { name: "📋 Backlog", color: "BLUE" },
                { name: "🔨 In Progress", color: "YELLOW" },
                { name: "👀 Review/Testing", color: "ORANGE" },
                { name: "🚀 Ready to Merge", color: "GREEN" },
                { name: "✅ Done", color: "PURPLE" }
              ];
              
              await github.graphql(addFieldMutation, {
                projectId,
                name: "Status",
                options: statusOptions
              });
              
              console.log('Created Status field with predefined options');
              
            } catch (error) {
              if (error.message.includes('already exists')) {
                console.log('LazySSH Development project already exists');
              } else {
                console.error('Error creating project:', error.message);
                console.log('');
                console.log('❌ MANUAL PROJECT CREATION REQUIRED ❌');
                console.log('');
                console.log('GitHub Actions cannot create projects for personal accounts.');
                console.log('Please create the project manually:');
                console.log('');
                console.log('1. Go to: https://github.com/users/' + owner + '/projects');
                console.log('2. Click "New project"');
                console.log('3. Choose "Table" view');
                console.log('4. Name it "LazySSH Development"');
                console.log('5. Add a "Status" field (Single select) with these options:');
                console.log('   - 📥 Triage');
                console.log('   - 📋 Backlog');
                console.log('   - 🔨 In Progress');
                console.log('   - 👀 Review/Testing');
                console.log('   - 🚀 Ready to Merge');
                console.log('   - ✅ Done');
                console.log('6. Note the project number from the URL');
                console.log('7. Re-run this workflow with sync_all=true and the correct project_number');
                console.log('');
              }
            }

  sync-existing-items:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all == 'true'
    steps:
      - name: Sync existing issues and PRs to project board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const projectNumber = context.payload.inputs?.project_number || 1;
            
            // First, check if owner is a user or organization
            let ownerResult = { user: null, organization: null };
            let isUser = false;
            let isOrg = false;
            
            // Try to fetch as user first
            try {
              const userQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    id
                    __typename
                  }
                }
              `;
              const userResult = await github.graphql(userQuery, { owner });
              if (userResult.user) {
                ownerResult.user = userResult.user;
                isUser = true;
              }
            } catch (error) {
              console.log(`Not a user account: ${error.message}`);
            }
            
            // If not a user, try as organization
            if (!isUser) {
              try {
                const orgQuery = `
                  query($owner: String!) {
                    organization(login: $owner) {
                      id
                      __typename
                    }
                  }
                `;
                const orgResult = await github.graphql(orgQuery, { owner });
                if (orgResult.organization) {
                  ownerResult.organization = orgResult.organization;
                  isOrg = true;
                }
              } catch (error) {
                console.log(`Not an organization account: ${error.message}`);
              }
            }
            
            console.log(`Owner ${owner} is: ${isUser ? 'User' : 'Organization'}`);
            
            // Get project info based on owner type
            let project = null;
            
            if (isUser) {
              const userProjectQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                      items(first: 100) {
                        nodes {
                          content {
                            ... on Issue {
                              number
                            }
                            ... on PullRequest {
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(userProjectQuery, {
                  owner,
                  number: parseInt(projectNumber)
                });
                project = result.user?.projectV2;
              } catch (error) {
                console.log(`Error querying user project: ${error.message}`);
              }
            }
            
            if (isOrg && !project) {
              const orgProjectQuery = `
                query($owner: String!, $number: Int!) {
                  organization(login: $owner) {
                    projectV2(number: $number) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                      items(first: 100) {
                        nodes {
                          content {
                            ... on Issue {
                              number
                            }
                            ... on PullRequest {
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(orgProjectQuery, {
                  owner,
                  number: parseInt(projectNumber)
                });
                project = result.organization?.projectV2;
              } catch (error) {
                console.log(`Error querying organization project: ${error.message}`);
              }
            }
            
            if (!project) {
              console.log(`Project #${projectNumber} not found for ${owner}`);
              console.log('Available projects can be viewed at: https://github.com/users/' + owner + '/projects');
              console.log('');
              console.log('Please create the project first or use the correct project number.');
              console.log('See the create-project-board job output for instructions.');
              return;
            }
            
            const existingItems = new Set(
              project.items.nodes
                .map(item => item.content?.number)
                .filter(Boolean)
            );
            
            const statusField = project.fields.nodes.find(field => 
              field.name.toLowerCase() === 'status'
            );
            
            const triageOption = statusField?.options.find(opt => 
              opt.name.toLowerCase().includes('triage')
            );
            const backlogOption = statusField?.options.find(opt => 
              opt.name.toLowerCase().includes('backlog')
            );
            
            // Get all open issues and PRs
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });
            
            for (const issue of issues) {
              if (existingItems.has(issue.number)) {
                console.log(`Item #${issue.number} already in project`);
                continue;
              }
              
              try {
                // Add to project
                const addMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;
                
                const addResult = await github.graphql(addMutation, {
                  projectId: project.id,
                  contentId: issue.node_id
                });
                
                // Set initial status
                const labels = issue.labels?.map(label => label.name) || [];
                const targetOption = labels.includes('needs-triage') ? triageOption : backlogOption;
                
                if (targetOption && statusField) {
                  const updateMutation = `
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: {
                          singleSelectOptionId: $optionId
                        }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;
                  
                  await github.graphql(updateMutation, {
                    projectId: project.id,
                    itemId: addResult.addProjectV2ItemById.item.id,
                    fieldId: statusField.id,
                    optionId: targetOption.id
                  });
                }
                
                console.log(`Added ${issue.pull_request ? 'PR' : 'issue'} #${issue.number} to project`);
                
              } catch (error) {
                console.log(`Error adding item #${issue.number}: ${error.message}`);
              }
            } 