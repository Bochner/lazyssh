name: Project Board Automation (v2)

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, reopened, labeled, unlabeled, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues and PRs to project board'
        required: false
        default: false
        type: boolean
      issue_number:
        description: 'Specific issue number to process (optional)'
        required: false
        type: string
      pr_number:
        description: 'Specific PR number to process (optional)'
        required: false
        type: string
      project_number:
        description: 'Project number to use (check URL for actual number)'
        required: false
        type: string
      discover_projects:
        description: 'List all available projects (for debugging)'
        required: false
        default: false
        type: boolean
      debug_project:
        description: 'Debug specific project access (provide project number)'
        required: false
        type: string
      setup_mode:
        description: 'Run in setup mode to help create project'
        required: false
        default: false
        type: boolean

env:
  PROJECT_NAME: "LazySSH Development"

jobs:
  setup-guide:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.setup_mode == 'true'
    steps:
      - name: Project Setup Guide
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner } = context.repo;
            
            console.log('🚀 LazySSH Project Board Setup Guide');
            console.log('===================================');
            console.log('');
            console.log('Since GitHub Actions cannot create Projects V2 for personal accounts,');
            console.log('you need to create the project manually. Here\'s how:');
            console.log('');
            console.log('📋 STEP 1: Create New Project');
            console.log('1. Go to: https://github.com/users/' + owner + '/projects');
            console.log('2. Click "New project"');
            console.log('3. Choose "Table" view');
            console.log('4. Name it "LazySSH Development"');
            console.log('5. Click "Create"');
            console.log('');
            console.log('🔧 STEP 2: Configure Status Field');
            console.log('1. In your new project, click the "+" next to existing columns');
            console.log('2. Select "New field"');
            console.log('3. Choose "Single select" field type');
            console.log('4. Name it "Status"');
            console.log('5. Add these options (copy exactly):');
            console.log('   📥 Triage');
            console.log('   📋 Backlog');
            console.log('   🔨 In Progress');
            console.log('   👀 Review/Testing');
            console.log('   🚀 Ready to Merge');
            console.log('   ✅ Done');
            console.log('6. Save the field');
            console.log('');
            console.log('📍 STEP 3: Get Project Number');
            console.log('1. Look at your project URL');
            console.log('2. It will be like: https://github.com/users/' + owner + '/projects/X');
            console.log('3. The X is your project number');
            console.log('');
            console.log('🔄 STEP 4: Test the Automation');
            console.log('1. Come back to this workflow');
            console.log('2. Click "Run workflow"');
            console.log('3. Set project_number to your actual project number');
            console.log('4. Enable "Sync all open issues and PRs"');
            console.log('5. Run the workflow');
            console.log('');
            console.log('💡 Pro tip: Set discover_projects=true to see all your projects');

  discover-projects:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.discover_projects == 'true' || github.event.inputs.debug_project != '')
    steps:
      - name: Check GitHub token permissions
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('🔐 Checking GitHub Token Permissions');
            console.log('====================================');
            try {
              const response = await github.request('GET /user');
              console.log('✅ Token is valid');
              console.log('🔑 Authenticated as:', response.data.login);
              console.log('📋 Token scopes:', response.headers['x-oauth-scopes'] || 'Standard GITHUB_TOKEN');
              console.log('');
              console.log('ℹ️  Note: GITHUB_TOKEN has limited project access for personal repos.');
              console.log('   Projects V2 access may be restricted depending on repository settings.');
            } catch (error) {
              console.log('❌ Token check failed:', error.message);
              console.log('');
              console.log('This might be normal - GITHUB_TOKEN has limited permissions.');
              console.log('The workflow will still attempt to find and access projects.');
            }

      - name: List all available projects (Enhanced Debug)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner } = context.repo;
            const debugProjectNumber = context.payload.inputs?.debug_project;
            
            console.log(`🔍 PROJECT DISCOVERY FOR ${owner}`);
            console.log('=======================================');
            console.log(`Target project number: ${debugProjectNumber || 'all'}`);
            console.log('');
            
            // Check if owner is a user or organization
            let isUser = false;
            let isOrg = false;
            
            // Try to fetch as user first with more detailed queries
            try {
              const userQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    id
                    login
                    name
                    projectsV2(first: 50, orderBy: {field: CREATED_AT, direction: DESC}) {
                      totalCount
                      nodes {
                        id
                        title
                        number
                        url
                        public
                        closed
                        createdAt
                        updatedAt
                        owner {
                          ... on User {
                            login
                          }
                          ... on Organization {
                            login
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const userResult = await github.graphql(userQuery, { owner });
              if (userResult.user) {
                isUser = true;
                console.log(`✅ Found user account: ${owner}`);
                console.log(`   ID: ${userResult.user.id}`);
                console.log(`   Name: ${userResult.user.name || 'N/A'}`);
                console.log(`   Total projects: ${userResult.user.projectsV2.totalCount}`);
                console.log('');
                
                if (userResult.user.projectsV2.nodes.length === 0) {
                  console.log('📋 NO PROJECTS FOUND');
                  console.log('====================');
                  console.log('❌ No Project V2 boards found for this account.');
                  console.log('');
                  console.log('🔧 SOLUTIONS:');
                  console.log('1. Create a new project at: https://github.com/users/' + owner + '/projects');
                  console.log('2. Make sure to create a "Project V2" (table view), not a classic project');
                  console.log('3. Run this workflow with setup_mode=true for detailed instructions');
                  console.log('');
                  console.log('📚 Why no projects?');
                  console.log('- You haven\'t created any Project V2 boards yet');
                  console.log('- Projects are private and token lacks read:project scope');
                  console.log('- Only Project V2 (beta) projects work with this automation');
                } else {
                  console.log('📋 AVAILABLE PROJECTS');
                  console.log('=====================');
                  
                  userResult.user.projectsV2.nodes.forEach((project, index) => {
                    const isTarget = debugProjectNumber && project.number.toString() === debugProjectNumber;
                    console.log(`${isTarget ? '🎯' : '📌'} Project #${project.number}: ${project.title}`);
                    console.log(`   URL: ${project.url}`);
                    console.log(`   ID: ${project.id}`);
                    console.log(`   Public: ${project.public ? 'Yes' : 'No'}`);
                    console.log(`   Status: ${project.closed ? 'Closed' : 'Open'}`);
                    console.log(`   Created: ${new Date(project.createdAt).toLocaleDateString()}`);
                    console.log(`   Updated: ${new Date(project.updatedAt).toLocaleDateString()}`);
                    console.log('');
                  });
                  
                  // Find LazySSH project
                  const lazysshProject = userResult.user.projectsV2.nodes.find(
                    p => p.title.toLowerCase().includes('lazyssh') || 
                         p.title.toLowerCase().includes('development')
                  );
                  
                  if (lazysshProject) {
                    console.log(`🎯 RECOMMENDED PROJECT: #${lazysshProject.number}`);
                    console.log(`   Use project_number: ${lazysshProject.number}`);
                  } else {
                    console.log('💡 RECOMMENDATION: Create a new project named "LazySSH Development"');
                  }
                  
                  // If debugging a specific project, try to access it directly
                  if (debugProjectNumber) {
                    const targetProject = userResult.user.projectsV2.nodes.find(
                      p => p.number.toString() === debugProjectNumber
                    );
                    
                    if (targetProject) {
                      console.log('');
                      console.log(`🔍 DETAILED ANALYSIS: Project #${debugProjectNumber}`);
                      console.log('========================================');
                      
                      // Try to query it directly for fields
                      try {
                        const directQuery = `
                          query($owner: String!, $number: Int!) {
                            user(login: $owner) {
                              projectV2(number: $number) {
                                id
                                title
                                number
                                fields(first: 20) {
                                  nodes {
                                    ... on ProjectV2Field {
                                      id
                                      name
                                      dataType
                                    }
                                    ... on ProjectV2SingleSelectField {
                                      id
                                      name
                                      dataType
                                      options {
                                        id
                                        name
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        `;
                        
                        const directResult = await github.graphql(directQuery, {
                          owner,
                          number: parseInt(debugProjectNumber)
                        });
                        
                        if (directResult.user?.projectV2) {
                          const project = directResult.user.projectV2;
                          console.log(`✅ Successfully accessed project #${debugProjectNumber}`);
                          console.log(`   Title: ${project.title}`);
                          console.log(`   Fields: ${project.fields.nodes.length}`);
                          console.log('');
                          console.log('🔧 PROJECT FIELDS:');
                          project.fields.nodes.forEach(field => {
                            console.log(`   - ${field.name} (${field.dataType})`);
                            if (field.options) {
                              field.options.forEach(option => {
                                console.log(`     * ${option.name}`);
                              });
                            }
                          });
                          
                          // Check for Status field
                          const statusField = project.fields.nodes.find(field => 
                            field.name.toLowerCase() === 'status'
                          );
                          
                          if (statusField) {
                            console.log('');
                            console.log('✅ Status field found - this project is ready for automation!');
                          } else {
                            console.log('');
                            console.log('⚠️  No Status field found. You need to add one with these options:');
                            console.log('   📥 Triage, 📋 Backlog, 🔨 In Progress, 👀 Review/Testing, 🚀 Ready to Merge, ✅ Done');
                          }
                        } else {
                          console.log(`❌ Could not access project details for #${debugProjectNumber}`);
                        }
                      } catch (directError) {
                        console.log(`❌ Error accessing project #${debugProjectNumber}: ${directError.message}`);
                      }
                    } else {
                      console.log(`❌ Project #${debugProjectNumber} not found in projects list`);
                    }
                  }
                }
              }
            } catch (error) {
              console.log(`❌ Error querying user projects: ${error.message}`);
              if (error.message.includes('Resource not accessible')) {
                console.log('');
                console.log('🔐 TOKEN PERMISSION ISSUE');
                console.log('========================');
                console.log('This error suggests the GitHub token lacks project access.');
                console.log('For personal repositories, this is often expected.');
                console.log('');
                console.log('Try these solutions:');
                console.log('1. Make sure your project is public');
                console.log('2. Check repository settings > Actions > General');
                console.log('3. Ensure "Read and write permissions" are enabled');
                console.log('4. Create the project manually and make it public');
              }
            }
            
            // If not a user, try as organization
            if (!isUser) {
              try {
                const orgQuery = `
                  query($owner: String!) {
                    organization(login: $owner) {
                      id
                      login
                      name
                      projectsV2(first: 50) {
                        totalCount
                        nodes {
                          id
                          title
                          number
                          url
                          public
                          closed
                          createdAt
                          updatedAt
                        }
                      }
                    }
                  }
                `;
                const orgResult = await github.graphql(orgQuery, { owner });
                if (orgResult.organization) {
                  isOrg = true;
                  console.log(`✅ Found organization account: ${owner}`);
                  console.log('📋 Available Projects:');
                  console.log('=====================');
                  
                  if (orgResult.organization.projectsV2.nodes.length === 0) {
                    console.log('❌ No projects found');
                  } else {
                    orgResult.organization.projectsV2.nodes.forEach(project => {
                      console.log(`📌 #${project.number}: ${project.title}`);
                      console.log(`   URL: ${project.url}`);
                      console.log(`   ID: ${project.id}`);
                      console.log(`   Public: ${project.public}`);
                      console.log('');
                    });
                  }
                }
              } catch (error) {
                console.log(`❌ Error querying organization: ${error.message}`);
              }
            }
            
            if (!isUser && !isOrg) {
              console.log(`❌ Could not identify account type for: ${owner}`);
            }
            
            console.log('');
            console.log('🔧 NEXT STEPS');
            console.log('=============');
            if (userResult?.user?.projectsV2?.nodes?.length > 0) {
              const firstProject = userResult.user.projectsV2.nodes[0];
              console.log(`1. Use project_number: ${firstProject.number} in workflow inputs`);
              console.log('2. Run workflow with sync_all=true to add existing issues');
            } else {
              console.log('1. Run this workflow with setup_mode=true for creation guide');
              console.log('2. Create project manually at: https://github.com/users/' + owner + '/projects');
              console.log('3. Return here with the project number');
            }

  update-project-board:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || (github.event.inputs.setup_mode != 'true' && github.event.inputs.discover_projects != 'true' && github.event.inputs.debug_project == '')
    steps:
      - name: Get Project ID
        id: get-project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = context.payload.inputs?.project_number;
            
            // If no project number specified, try to find LazySSH project or default to 1
            let targetProjectNumber = projectNumber ? parseInt(projectNumber) : null;
            
            console.log(`🔍 Looking for project number: ${targetProjectNumber || 'auto-detect'}`);
            
            // First, check if owner is a user or organization
            let ownerResult = { user: null, organization: null };
            let isUser = false;
            let isOrg = false;
            
            // Try to fetch as user first
            try {
              const userQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    id
                    projectsV2(first: 10) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `;
              const userResult = await github.graphql(userQuery, {
                owner: context.repo.owner
              });
              if (userResult.user) {
                ownerResult.user = userResult.user;
                isUser = true;
                
                // If no project number specified, try to find LazySSH project
                if (!targetProjectNumber) {
                  const lazysshProject = userResult.user.projectsV2.nodes.find(
                    p => p.title.toLowerCase().includes('lazyssh') || 
                         p.title.toLowerCase().includes('development')
                  );
                  
                  if (lazysshProject) {
                    targetProjectNumber = lazysshProject.number;
                    console.log(`✅ Auto-detected LazySSH project: #${targetProjectNumber}`);
                  } else if (userResult.user.projectsV2.nodes.length > 0) {
                    targetProjectNumber = userResult.user.projectsV2.nodes[0].number;
                    console.log(`⚠️  Using first available project: #${targetProjectNumber}`);
                  }
                }
              }
            } catch (error) {
              console.log(`Not a user account or access denied: ${error.message}`);
            }
            
            // If not a user, try as organization
            if (!isUser) {
              try {
                const orgQuery = `
                  query($owner: String!) {
                    organization(login: $owner) {
                      id
                      projectsV2(first: 10) {
                        nodes {
                          id
                          title
                          number
                        }
                      }
                    }
                  }
                `;
                const orgResult = await github.graphql(orgQuery, {
                  owner: context.repo.owner
                });
                if (orgResult.organization) {
                  ownerResult.organization = orgResult.organization;
                  isOrg = true;
                  
                  // Auto-detect logic for org
                  if (!targetProjectNumber) {
                    const lazysshProject = orgResult.organization.projectsV2.nodes.find(
                      p => p.title.toLowerCase().includes('lazyssh')
                    );
                    
                    if (lazysshProject) {
                      targetProjectNumber = lazysshProject.number;
                      console.log(`✅ Auto-detected LazySSH project: #${targetProjectNumber}`);
                    } else if (orgResult.organization.projectsV2.nodes.length > 0) {
                      targetProjectNumber = orgResult.organization.projectsV2.nodes[0].number;
                      console.log(`⚠️  Using first available project: #${targetProjectNumber}`);
                    }
                  }
                }
              } catch (error) {
                console.log(`Not an organization account: ${error.message}`);
              }
            }
            
            if (!targetProjectNumber) {
              console.log('❌ NO PROJECT FOUND');
              console.log('===================');
              console.log('Could not find any projects to use.');
              console.log('');
              console.log('🔧 TO FIX THIS:');
              console.log('1. Run workflow with setup_mode=true for setup guide');
              console.log('2. Or run with discover_projects=true to see available projects');
              console.log('3. Create a project at: https://github.com/users/' + context.repo.owner + '/projects');
              console.log('4. Come back with the project number');
              
              core.setOutput('project-found', 'false');
              core.setOutput('error-message', 'No projects found. Run with setup_mode=true for help.');
              return;
            }
            
            console.log(`🔄 Syncing to project #${targetProjectNumber}`);
            console.log(`Owner ${context.repo.owner} is: ${isUser ? 'User' : 'Organization'}`);
            
            // Query project based on owner type
            let project = null;
            
            if (isUser) {
              const userQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(userQuery, {
                  owner: context.repo.owner,
                  number: targetProjectNumber
                });
                project = result.user?.projectV2;
              } catch (error) {
                console.log(`❌ Error querying project: ${error.message}`);
                if (error.message.includes('Could not resolve to a ProjectV2')) {
                  console.log('');
                  console.log('Project not found. Try running with discover_projects=true');
                  console.log('or create the project first with setup_mode=true');
                }
                return;
              }
            }
            
            if (isOrg && !project) {
              const orgQuery = `
                query($owner: String!, $number: Int!) {
                  organization(login: $owner) {
                    projectV2(number: $number) {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(orgQuery, {
                  owner: context.repo.owner,
                  number: targetProjectNumber
                });
                project = result.organization?.projectV2;
              } catch (error) {
                console.log(`❌ Error querying organization project: ${error.message}`);
                return;
              }
            }
            
            if (!project) {
              console.log('');
              console.log('📋 QUICK SETUP REMINDER');
              console.log('=======================');
              console.log('If you need to create a project:');
              console.log('1. Go to: https://github.com/users/' + context.repo.owner + '/projects');
              console.log('2. Click "New project" → "Table" view');
              console.log('3. Name it "LazySSH Development"');
              console.log('4. Add Status field with proper options');
              console.log('5. Return with the project number');
              console.log('');
              console.log('🎯 Once setup, re-run workflow with sync_all=true to populate!');

              core.setOutput('project-found', 'false');
              core.setOutput('error-message', `Project #${targetProjectNumber} not found`);
              return;
            }
            
            console.log(`✅ Found project: ${project.title}`);
            
            // Find the Status field
            const statusField = project.fields.nodes.find(field => 
              field.name.toLowerCase() === 'status' || 
              field.name.toLowerCase() === 'column' ||
              field.name.toLowerCase() === 'state'
            );
            
            if (!statusField) {
              console.log('⚠️  No Status field found in project');
              console.log('');
              console.log('🔧 TO ADD STATUS FIELD:');
              console.log('1. Go to your project');
              console.log('2. Click "+" next to columns');
              console.log('3. Select "New field" → "Single select"');
              console.log('4. Name it "Status"');
              console.log('5. Add options: 📥 Triage, 📋 Backlog, 🔨 In Progress, 👀 Review/Testing, 🚀 Ready to Merge, ✅ Done');
              
              core.setOutput('project-found', 'false');
              core.setOutput('error-message', 'No Status field found. Please add one.');
              return;
            }
            
            console.log(`✅ Found Status field with ${statusField.options?.length || 0} options`);
            
            core.setOutput('project-found', 'true');
            core.setOutput('project-id', project.id);
            core.setOutput('project-number', targetProjectNumber);
            core.setOutput('status-field-id', statusField.id);
            core.setOutput('status-options', JSON.stringify(statusField.options || []));
            
            return {
              projectId: project.id,
              statusFieldId: statusField.id,
              statusOptions: statusField.options || []
            };

      - name: Add item to project
        id: add-item
        uses: actions/github-script@v7
        if: (github.event.action == 'opened' || github.event_name == 'workflow_dispatch') && steps.get-project.outputs.project-found == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = steps['get-project'].outputs['project-id'];
            const item = context.payload.issue || context.payload.pull_request;
            
            if (!item && github.event_name !== 'workflow_dispatch') {
              console.log('No item to process');
              return;
            }
            
            // For workflow_dispatch, handle specific issue/PR if provided
            let contentId = item?.node_id;
            let itemNumber = item?.number;
            
            if (github.event_name === 'workflow_dispatch') {
              const issueNumber = context.payload.inputs?.issue_number;
              const prNumber = context.payload.inputs?.pr_number;
              
              if (issueNumber) {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                contentId = issue.node_id;
                itemNumber = issue.number;
              } else if (prNumber) {
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });
                contentId = pr.node_id;
                itemNumber = pr.number;
              }
            }
            
            if (!contentId) {
              console.log('No content ID available');
              return;
            }
            
            // Check if item already exists in project
            const checkQuery = `
              query($projectId: ID!, $contentId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const checkResult = await github.graphql(checkQuery, {
              projectId,
              contentId
            });
            
            const existingItem = checkResult.node.items.nodes.find(
              item => item.content?.id === contentId
            );
            
            if (existingItem) {
              console.log(`Item #${itemNumber} already exists in project`);
              core.setOutput('item-id', existingItem.id);
              return { itemId: existingItem.id };
            }
            
            // Add item to project
            const addMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            
            const addResult = await github.graphql(addMutation, {
              projectId,
              contentId
            });
            
            const itemId = addResult.addProjectV2ItemById.item.id;
            console.log(`✅ Added item #${itemNumber} to project`);
            core.setOutput('item-id', itemId);
            
            return { itemId };

      - name: Update item status
        uses: actions/github-script@v7
        if: steps.get-project.outputs.project-found == 'true' && (steps.add-item.outputs.item-id || github.event.action != 'opened')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = steps['get-project'].outputs['project-id'];
            const statusFieldId = steps['get-project'].outputs['status-field-id'];
            const statusOptions = JSON.parse(steps['get-project'].outputs['status-options']);
            
            let itemId = steps['add-item'].outputs['item-id'];
            
            const item = context.payload.issue || context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const action = context.payload.action;
            
            // If we don't have an item ID, find it in the project
            if (!itemId && item) {
              const findQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                            }
                            ... on PullRequest {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const findResult = await github.graphql(findQuery, { projectId });
              const foundItem = findResult.node.items.nodes.find(
                projectItem => projectItem.content?.number === item.number
              );
              
              if (foundItem) {
                itemId = foundItem.id;
                console.log(`Found existing item #${item.number} in project`);
              } else {
                console.log(`Item #${item.number} not found in project`);
                return;
              }
            }
            
            if (!itemId) {
              console.log('No item ID available');
              return;
            }
            
            // Determine target status based on action and labels
            let targetStatus = null;
            const labels = item?.labels?.map(label => label.name) || [];
            
            // Define status mapping
            const statusMap = {
              'triage': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('triage') || 
                opt.name.toLowerCase().includes('new')
              ),
              'backlog': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('backlog') || 
                opt.name.toLowerCase().includes('todo')
              ),
              'in_progress': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('progress') || 
                opt.name.toLowerCase().includes('doing') ||
                opt.name.toLowerCase().includes('development')
              ),
              'review': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('review') || 
                opt.name.toLowerCase().includes('testing')
              ),
              'ready_to_merge': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('ready') && 
                opt.name.toLowerCase().includes('merge')
              ),
              'done': statusOptions.find(opt => 
                opt.name.toLowerCase().includes('done') || 
                opt.name.toLowerCase().includes('closed') ||
                opt.name.toLowerCase().includes('complete')
              )
            };
            
            // Determine target status based on event
            switch (action) {
              case 'opened':
                if (labels.includes('needs-triage')) {
                  targetStatus = statusMap.triage;
                } else if (labels.includes('ready-for-review')) {
                  targetStatus = statusMap.review;
                } else {
                  targetStatus = statusMap.backlog;
                }
                break;
                
              case 'closed':
                targetStatus = statusMap.done;
                break;
                
              case 'reopened':
                targetStatus = isIssue ? statusMap.backlog : statusMap.review;
                break;
                
              case 'labeled':
                if (labels.includes('work-in-progress')) {
                  targetStatus = statusMap.in_progress;
                } else if (labels.includes('ready-for-review')) {
                  targetStatus = statusMap.review;
                } else if (labels.includes('needs-triage')) {
                  targetStatus = statusMap.triage;
                }
                break;
                
              case 'assigned':
                targetStatus = statusMap.in_progress;
                break;
                
              case 'ready_for_review':
                targetStatus = statusMap.review;
                break;
                
              case 'converted_to_draft':
                targetStatus = statusMap.in_progress;
                break;
            }
            
            // Handle PR review events
            if (context.payload.review) {
              const review = context.payload.review;
              if (review.state === 'approved') {
                // Check if all required reviews are approved
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: item.number
                });
                
                const latestReviews = {};
                reviews.forEach(r => {
                  latestReviews[r.user.login] = r.state;
                });
                
                const hasApprovals = Object.values(latestReviews).some(state => state === 'APPROVED');
                const hasRequestedChanges = Object.values(latestReviews).some(state => state === 'CHANGES_REQUESTED');
                
                if (hasApprovals && !hasRequestedChanges) {
                  targetStatus = statusMap.ready_to_merge || statusMap.review;
                }
              } else if (review.state === 'changes_requested') {
                targetStatus = statusMap.in_progress;
              }
            }
            
            if (!targetStatus) {
              console.log('No target status determined');
              return;
            }
            
            // Update the item's status
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            await github.graphql(updateMutation, {
              projectId,
              itemId,
              fieldId: statusFieldId,
              optionId: targetStatus.id
            });
            
            console.log(`✅ Updated item #${item.number} to status: ${targetStatus.name}`);

      - name: Project setup reminder
        if: steps.get-project.outputs.project-found != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const errorMessage = steps['get-project'].outputs['error-message'] || 'Project not found';
            const projectNumber = steps['get-project'].outputs['project-number'] || 'unknown';
            
            console.log('⚠️  PROJECT SETUP REQUIRED');
            console.log('==========================');
            console.log(`Error: ${errorMessage}`);
            console.log('');
            console.log('🔧 QUICK FIX OPTIONS:');
            console.log('');
            console.log('Option 1 - Get Setup Help:');
            console.log('  1. Go to Actions tab');
            console.log('  2. Click "Run workflow" on this automation');
            console.log('  3. Enable "Run in setup mode"');
            console.log('  4. Click "Run workflow"');
            console.log('');
            console.log('Option 2 - See Available Projects:');
            console.log('  1. Click "Run workflow" on this automation');
            console.log('  2. Enable "List all available projects"');
            console.log('  3. Click "Run workflow"');
            console.log('');
            console.log('Option 3 - Create Project Manually:');
            console.log('  1. Go to: https://github.com/users/' + context.repo.owner + '/projects');
            console.log('  2. Click "New project" → "Table" view');
            console.log('  3. Name it "LazySSH Development"');
            console.log('  4. Add Status field with proper options');
            console.log('  5. Return with the project number');
            console.log('');
            console.log('🎯 Once setup, re-run workflow with sync_all=true to populate!');

  sync-existing-items:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all == 'true'
    steps:
      - name: Sync existing issues and PRs to project board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const projectNumber = context.payload.inputs?.project_number;
            
            // Use the same project discovery logic as the main job
            let targetProjectNumber = projectNumber ? parseInt(projectNumber) : null;
            
            // First, check if owner is a user or organization
            let ownerResult = { user: null, organization: null };
            let isUser = false;
            let isOrg = false;
            
            // Try to fetch as user first
            try {
              const userQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    id
                    projectsV2(first: 10) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `;
              const userResult = await github.graphql(userQuery, { owner });
              if (userResult.user) {
                ownerResult.user = userResult.user;
                isUser = true;
                
                // Auto-detect LazySSH project if not specified
                if (!targetProjectNumber) {
                  const lazysshProject = userResult.user.projectsV2.nodes.find(
                    p => p.title.toLowerCase().includes('lazyssh') || 
                         p.title.toLowerCase().includes('development')
                  );
                  
                  if (lazysshProject) {
                    targetProjectNumber = lazysshProject.number;
                    console.log(`✅ Auto-detected LazySSH project: #${targetProjectNumber}`);
                  } else if (userResult.user.projectsV2.nodes.length > 0) {
                    targetProjectNumber = userResult.user.projectsV2.nodes[0].number;
                    console.log(`⚠️  Using first available project: #${targetProjectNumber}`);
                  }
                }
              }
            } catch (error) {
              console.log(`Not a user account: ${error.message}`);
            }
            
            // If not a user, try as organization
            if (!isUser) {
              try {
                const orgQuery = `
                  query($owner: String!) {
                    organization(login: $owner) {
                      id
                      projectsV2(first: 10) {
                        nodes {
                          id
                          title
                          number
                        }
                      }
                    }
                  }
                `;
                const orgResult = await github.graphql(orgQuery, { owner });
                if (orgResult.organization) {
                  ownerResult.organization = orgResult.organization;
                  isOrg = true;
                  
                  // Auto-detect for org
                  if (!targetProjectNumber && orgResult.organization.projectsV2.nodes.length > 0) {
                    targetProjectNumber = orgResult.organization.projectsV2.nodes[0].number;
                  }
                }
              } catch (error) {
                console.log(`Not an organization account: ${error.message}`);
              }
            }
            
            if (!targetProjectNumber) {
              console.log('❌ No project number available for sync');
              console.log('Please run with discover_projects=true to see available projects');
              return;
            }
            
            console.log(`🔄 Syncing to project #${targetProjectNumber}`);
            console.log(`Owner ${owner} is: ${isUser ? 'User' : 'Organization'}`);
            
            // Get project info based on owner type
            let project = null;
            
            if (isUser) {
              const userProjectQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                      items(first: 100) {
                        nodes {
                          content {
                            ... on Issue {
                              number
                            }
                            ... on PullRequest {
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(userProjectQuery, {
                  owner,
                  number: targetProjectNumber
                });
                project = result.user?.projectV2;
              } catch (error) {
                console.log(`❌ Error querying project: ${error.message}`);
                if (error.message.includes('Could not resolve to a ProjectV2')) {
                  console.log('');
                  console.log('Project not found. Try running with discover_projects=true');
                  console.log('or create the project first with setup_mode=true');
                }
                return;
              }
            }
            
            if (isOrg && !project) {
              const orgProjectQuery = `
                query($owner: String!, $number: Int!) {
                  organization(login: $owner) {
                    projectV2(number: $number) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                      items(first: 100) {
                        nodes {
                          content {
                            ... on Issue {
                              number
                            }
                            ... on PullRequest {
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(orgProjectQuery, {
                  owner,
                  number: targetProjectNumber
                });
                project = result.organization?.projectV2;
              } catch (error) {
                console.log(`❌ Error querying organization project: ${error.message}`);
                return;
              }
            }
            
            if (!project) {
              console.log('❌ Project not accessible');
              console.log('Run with discover_projects=true to see available projects');
              return;
            }
            
            console.log(`✅ Found project for sync`);
            
            const existingItems = new Set(
              project.items.nodes
                .map(item => item.content?.number)
                .filter(Boolean)
            );
            
            const statusField = project.fields.nodes.find(field => 
              field.name.toLowerCase() === 'status'
            );
            
            const triageOption = statusField?.options.find(opt => 
              opt.name.toLowerCase().includes('triage')
            );
            const backlogOption = statusField?.options.find(opt => 
              opt.name.toLowerCase().includes('backlog')
            );
            
            console.log(`📊 Project has ${existingItems.size} existing items`);
            
            // Get all open issues and PRs
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });
            
            console.log(`📋 Found ${issues.length} open issues/PRs to sync`);
            
            let addedCount = 0;
            let skippedCount = 0;
            
            for (const issue of issues) {
              if (existingItems.has(issue.number)) {
                console.log(`⏭️  Item #${issue.number} already in project`);
                skippedCount++;
                continue;
              }
              
              try {
                // Add to project
                const addMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;
                
                const addResult = await github.graphql(addMutation, {
                  projectId: project.id,
                  contentId: issue.node_id
                });
                
                // Set initial status
                const labels = issue.labels?.map(label => label.name) || [];
                const targetOption = labels.includes('needs-triage') ? triageOption : backlogOption;
                
                if (targetOption && statusField) {
                  const updateMutation = `
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: {
                          singleSelectOptionId: $optionId
                        }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;
                  
                  await github.graphql(updateMutation, {
                    projectId: project.id,
                    itemId: addResult.addProjectV2ItemById.item.id,
                    fieldId: statusField.id,
                    optionId: targetOption.id
                  });
                }
                
                console.log(`✅ Added ${issue.pull_request ? 'PR' : 'issue'} #${issue.number} to project`);
                addedCount++;
                
              } catch (error) {
                console.log(`❌ Error adding item #${issue.number}: ${error.message}`);
              }
            }
            
            console.log('');
            console.log(`🎉 SYNC COMPLETE`);
            console.log(`===============`);
            console.log(`✅ Added: ${addedCount} items`);
            console.log(`⏭️  Skipped: ${skippedCount} items (already in project)`);
            console.log(`📊 Total: ${addedCount + skippedCount} items processed`); 