name: Auto Assignment

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened]

jobs:
  auto-assign:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-assign based on labels and content
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const item = context.payload.issue || context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const title = item.title.toLowerCase();
            const body = item.body?.toLowerCase() || '';
            const labels = item.labels?.map(label => label.name) || [];
            
            let assignees = [];
            
            // Auto-assign based on content areas
            if (title.includes('scp') || body.includes('scp') || body.includes('file transfer')) {
              assignees.push('Bochner'); // SCP mode specialist
            }
            
            if (title.includes('security') || body.includes('security') || body.includes('vulnerability')) {
              assignees.push('Bochner'); // Security issues need immediate attention
            }
            
            if (title.includes('performance') || body.includes('performance') || body.includes('slow')) {
              assignees.push('Bochner'); // Performance optimization
            }
            
            if (title.includes('ui') || title.includes('display') || body.includes('interface')) {
              assignees.push('Bochner'); // UI/UX improvements
            }
            
            // For pull requests, assign based on files changed
            if (!isIssue) {
              try {
                const { data: files } = await github.rest.pulls.listFiles({
                  owner,
                  repo,
                  pull_number: item.number
                });
                
                const changedFiles = files.map(file => file.filename);
                
                // Core functionality changes
                if (changedFiles.some(file => file.startsWith('src/lazyssh/'))) {
                  assignees.push('Bochner');
                }
                
                // Documentation changes
                if (changedFiles.some(file => file.includes('README') || file.startsWith('docs/'))) {
                  assignees.push('Bochner');
                }
                
                // Test changes
                if (changedFiles.some(file => file.startsWith('tests/'))) {
                  assignees.push('Bochner');
                }
                
              } catch (error) {
                console.log('Could not fetch PR files:', error.message);
              }
            }
            
            // High priority items get assigned immediately
            if (labels.includes('high-priority') || labels.includes('critical')) {
              assignees.push('Bochner');
            }
            
            // Remove duplicates and assign
            assignees = [...new Set(assignees)];
            
            if (assignees.length > 0) {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: item.number,
                assignees: assignees
              });
              
              console.log(`Auto-assigned ${assignees.join(', ')} to ${isIssue ? 'issue' : 'PR'} #${item.number}`);
            }

  assign-reviewers:
    runs-on: ubuntu-latest
    if: github.event.pull_request
    steps:
      - name: Auto-assign PR reviewers
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const author = pr.user.login;
            
            // Don't auto-assign if the author is the main maintainer
            if (author === 'Bochner') {
              console.log('PR author is main maintainer, skipping auto-review assignment');
              return;
            }
            
            let reviewers = ['Bochner']; // Main maintainer reviews all external PRs
            
            // Add additional reviewers based on files changed
            try {
              const { data: files } = await github.rest.pulls.listFiles({
                owner,
                repo,
                pull_number: pr.number
              });
              
              const changedFiles = files.map(file => file.filename);
              
              // Critical files need thorough review
              const criticalFiles = [
                'src/lazyssh/core/',
                'src/lazyssh/connection/',
                'src/lazyssh/tunnel/',
                'install.sh',
                'pyproject.toml'
              ];
              
              if (changedFiles.some(file => criticalFiles.some(critical => file.includes(critical)))) {
                // Keep main maintainer as primary reviewer for critical changes
                console.log('Critical files changed, maintaining current reviewer assignment');
              }
              
            } catch (error) {
              console.log('Could not fetch PR files:', error.message);
            }
            
            // Request review
            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number: pr.number,
                reviewers: reviewers
              });
              
              console.log(`Requested review from ${reviewers.join(', ')} for PR #${pr.number}`);
            } 