name: Publish Python Package

on:
  release:
    types: [created]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        set -e
        python -m pip install --upgrade pip
        pip install -e ".[dev]" || { echo "Failed to install package dependencies"; exit 1; }
        pip install --user pyupgrade typing_extensions black isort flake8 mypy || { echo "Failed to install linting tools"; exit 1; }
        
        # Show environment info for debugging
        echo "Python location: $(which python)"
        echo "Pip location: $(which pip)"
        echo "PATH: $PATH"
        echo "Pip install location: $(pip -V)"
        echo "Installed packages:"
        pip list | grep -E "pyupgrade|black|isort|flake8|mypy"
        
        # Look for pyupgrade in various locations
        echo "Looking for pyupgrade in different locations..."
        ls -la ~/.local/bin/ || echo "~/.local/bin not found"
        find ~/.local -name pyupgrade || echo "pyupgrade not found in ~/.local"
        find /opt -name pyupgrade || echo "pyupgrade not found in /opt"
        find $pythonLocation -name pyupgrade || echo "pyupgrade not found in pythonLocation"
        
        # Add ~/.local/bin to PATH if it exists
        if [ -d ~/.local/bin ]; then
          export PATH=~/.local/bin:$PATH
          echo "Added ~/.local/bin to PATH: $PATH"
        fi
        
        # Verify tools are installed and available
        echo "Verifying installed tools..."
        which pyupgrade || { echo "pyupgrade not found in PATH after installation"; exit 1; }
        which black || { echo "black not found in PATH after installation"; exit 1; }
        which isort || { echo "isort not found in PATH after installation"; exit 1; }
        which flake8 || { echo "flake8 not found in PATH after installation"; exit 1; }
        which mypy || { echo "mypy not found in PATH after installation"; exit 1; }
    
    - name: Check Python 3.11+ code optimizations
      run: |
        echo "Running pyupgrade using multiple methods..."
        
        # Try the direct command first
        if command -v pyupgrade &> /dev/null; then
          echo "Using direct pyupgrade command"
          pyupgrade --py311-plus $(find src -name "*.py") && echo "Direct pyupgrade completed successfully"
        elif python -m pip show pyupgrade &> /dev/null; then
          echo "Using python -m pyupgrade"
          python -m pyupgrade --py311-plus $(find src -name "*.py") && echo "Python module pyupgrade completed successfully"
        else
          echo "Installing pyupgrade again with different method"
          pip install --upgrade --force-reinstall pyupgrade
          export PATH=$PATH:~/.local/bin
          pyupgrade --py311-plus $(find src -name "*.py") && echo "Pyupgrade after reinstall completed successfully"
        fi
    
    - name: Check formatting with Black
      run: |
        black --check --line-length 100 --target-version py311 src tests
    
    - name: Check imports with isort
      run: |
        isort --check-only --profile black src tests
    
    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type check with mypy (stricter settings)
      run: |
        mypy --python-version 3.11 --disallow-untyped-defs --disallow-incomplete-defs --ignore-missing-imports src
    
    - name: Check for non-pathlib path operations
      run: |
        echo "Checking for os.path usage that should use pathlib instead..."
        OSPATH_COUNT=$(grep -r "os\.path\." --include="*.py" src | wc -l)
        if [ "$OSPATH_COUNT" -gt 0 ]; then
          echo "::warning::Found $OSPATH_COUNT instances of os.path usage that could be replaced with pathlib"
          grep -r "os\.path\." --include="*.py" src | head -10
        fi
    
    - name: Test basic import
      run: |
        python -c "import lazyssh; print(f'Successfully imported lazyssh version {lazyssh.__version__}')"
    
    # Additional steps for publishing
    
    - name: Set version from release tag
      if: github.event_name == 'release'
      run: |
        # Get version from release tag (without 'v' prefix)
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        echo "Using version from release tag: $VERSION"
        
        # Update files with the release version
        python scripts/release.py "$VERSION"
        
        # Verify with import
        python -c "import lazyssh; print(f'Package version: {lazyssh.__version__}')"
    
    - name: Install build dependencies
      run: |
        pip install build wheel twine || { echo "Failed to install build tools"; exit 1; }
    
    - name: Clean and build package
      run: |
        # Clean build directories
        rm -rf dist/ build/ *.egg-info/
        
        # Build the package
        python -m build
        
        # Show built distributions
        ls -la dist/
    
    - name: Verify package with twine
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      if: github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true 