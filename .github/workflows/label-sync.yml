name: Label Synchronization

on:
  push:
    branches:
      - main
    paths:
      - '.github/labels.yml'
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Mondays at 2 AM UTC
  workflow_dispatch:

jobs:
  sync-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync labels
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            
            // Define the standard labels for LazySSH
            const standardLabels = [
              // Priority labels
              { name: 'critical', color: 'd73a4a', description: 'Critical issues that need immediate attention' },
              { name: 'high-priority', color: 'e99695', description: 'High priority issues' },
              { name: 'medium-priority', color: 'fbca04', description: 'Medium priority issues' },
              { name: 'low-priority', color: '0e8a16', description: 'Low priority issues' },
              
              // Type labels
              { name: 'bug', color: 'd73a4a', description: 'Something isn\'t working' },
              { name: 'enhancement', color: 'a2eeef', description: 'New feature or request' },
              { name: 'documentation', color: '0075ca', description: 'Improvements or additions to documentation' },
              { name: 'question', color: 'd876e3', description: 'Further information is requested' },
              { name: 'duplicate', color: 'cfd3d7', description: 'This issue or pull request already exists' },
              { name: 'invalid', color: 'e4e669', description: 'This doesn\'t seem right' },
              { name: 'wontfix', color: 'ffffff', description: 'This will not be worked on' },
              
              // Component labels (LazySSH specific)
              { name: 'scp-mode', color: 'c5def5', description: 'Related to SCP file transfer functionality' },
              { name: 'tunnel-management', color: 'f9d0c4', description: 'Related to SSH tunnel management' },
              { name: 'connection-handling', color: 'fef2c0', description: 'Related to SSH connection handling' },
              { name: 'ui-ux', color: 'c2e0c6', description: 'User interface and experience improvements' },
              { name: 'performance', color: 'bfd4f2', description: 'Performance improvements' },
              { name: 'security', color: 'ee0701', description: 'Security related issues' },
              { name: 'configuration', color: 'd4c5f9', description: 'Configuration and settings related' },
              
              // Workflow labels
              { name: 'needs-triage', color: 'ededed', description: 'Needs triage and review' },
              { name: 'needs-reproduction', color: 'fad8c7', description: 'Bug needs to be reproduced' },
              { name: 'needs-testing', color: 'c5def5', description: 'Needs testing before merge' },
              { name: 'ready-for-review', color: '0e8a16', description: 'Ready for code review' },
              { name: 'work-in-progress', color: 'fbca04', description: 'Work in progress' },
              { name: 'blocked', color: 'd73a4a', description: 'Blocked by other work' },
              
              // Special labels
              { name: 'good-first-issue', color: '7057ff', description: 'Good for newcomers' },
              { name: 'help-wanted', color: '008672', description: 'Extra attention is needed' },
              { name: 'stale', color: 'fef2c0', description: 'Inactive for extended period' },
              { name: 'keep-open', color: '0e8a16', description: 'Exempt from stale bot' },
              
              // Platform labels
              { name: 'linux', color: 'f9d0c4', description: 'Linux specific' },
              { name: 'macos', color: 'c5def5', description: 'macOS specific' },
              { name: 'windows', color: 'bfd4f2', description: 'Windows specific' },
              
              // Python specific
              { name: 'python', color: '3776ab', description: 'Python related' },
              { name: 'dependencies', color: '0366d6', description: 'Pull requests that update a dependency file' }
            ];
            
            const { owner, repo } = context.repo;
            
            try {
              // Get existing labels
              const { data: existingLabels } = await github.rest.issues.listLabelsForRepo({
                owner,
                repo
              });
              
              const existingLabelNames = existingLabels.map(label => label.name);
              
              for (const label of standardLabels) {
                try {
                  if (existingLabelNames.includes(label.name)) {
                    // Update existing label
                    await github.rest.issues.updateLabel({
                      owner,
                      repo,
                      name: label.name,
                      color: label.color,
                      description: label.description
                    });
                    console.log(`Updated label: ${label.name}`);
                  } else {
                    // Create new label
                    await github.rest.issues.createLabel({
                      owner,
                      repo,
                      name: label.name,
                      color: label.color,
                      description: label.description
                    });
                    console.log(`Created label: ${label.name}`);
                  }
                } catch (error) {
                  console.log(`Error with label ${label.name}: ${error.message}`);
                }
              }
              
              // Report on labels that exist but aren't in our standard set
              const standardLabelNames = standardLabels.map(label => label.name);
              const extraLabels = existingLabels.filter(label => !standardLabelNames.includes(label.name));
              
              if (extraLabels.length > 0) {
                console.log('Extra labels found (not in standard set):');
                extraLabels.forEach(label => console.log(`- ${label.name}: ${label.description}`));
              }
              
            } catch (error) {
              console.error('Error syncing labels:', error);
              throw error;
            }

  audit-labels:
    runs-on: ubuntu-latest
    needs: sync-labels
    steps:
      - name: Audit label usage
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            try {
              // Get all issues and PRs with labels
              const { data: issues } = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: 'all',
                per_page: 100
              });
              
              const labelUsage = {};
              let unlabeledCount = 0;
              
              issues.forEach(issue => {
                if (issue.labels.length === 0) {
                  unlabeledCount++;
                } else {
                  issue.labels.forEach(label => {
                    labelUsage[label.name] = (labelUsage[label.name] || 0) + 1;
                  });
                }
              });
              
              console.log('üìä Label Usage Report:');
              console.log(`Total issues/PRs: ${issues.length}`);
              console.log(`Unlabeled items: ${unlabeledCount}`);
              console.log('');
              console.log('Most used labels:');
              
              const sortedLabels = Object.entries(labelUsage)
                .sort(([,a], [,b]) => b - a)
                .slice(0, 10);
              
              sortedLabels.forEach(([label, count]) => {
                console.log(`- ${label}: ${count} uses`);
              });
              
              // Check for items that might need better labeling
              const needsTriageItems = issues.filter(issue => 
                issue.state === 'open' && 
                issue.labels.length === 0 ||
                issue.labels.some(label => label.name === 'needs-triage')
              );
              
              if (needsTriageItems.length > 0) {
                console.log(`\n‚ö†Ô∏è  ${needsTriageItems.length} items need triage`);
              }
              
            } catch (error) {
              console.error('Error auditing labels:', error);
            } 