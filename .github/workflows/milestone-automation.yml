name: Milestone Automation

on:
  issues:
    types: [opened, closed, labeled, unlabeled]
  pull_request:
    types: [opened, closed, labeled, unlabeled]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6 AM UTC
  workflow_dispatch:

jobs:
  manage-milestones:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-assign to milestones
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const item = context.payload.issue || context.payload.pull_request;
            
            // Only process if we have an item (not for scheduled runs)
            if (!item) return;
            
            const isIssue = !!context.payload.issue;
            const labels = item.labels?.map(label => label.name) || [];
            const title = item.title.toLowerCase();
            const body = item.body?.toLowerCase() || '';
            
            // Get current milestone info
            let currentMilestone = null;
            try {
              const { data: milestones } = await github.rest.issues.listMilestones({
                owner,
                repo,
                state: 'open'
              });
              
              // Define milestone assignment logic
              let targetMilestone = null;
              
              // Critical issues go to next patch release
              if (labels.includes('critical') || labels.includes('security')) {
                targetMilestone = milestones.find(m => 
                  m.title.includes('patch') || 
                  m.title.includes('hotfix') ||
                  m.due_on && new Date(m.due_on) <= new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // Due within 2 weeks
                );
              }
              
              // High priority features for next minor release
              else if (labels.includes('high-priority') && labels.includes('enhancement')) {
                targetMilestone = milestones.find(m => 
                  m.title.includes('minor') ||
                  m.title.includes('feature') ||
                  (m.due_on && new Date(m.due_on) <= new Date(Date.now() + 60 * 24 * 60 * 60 * 1000)) // Due within 2 months
                );
              }
              
              // Documentation improvements
              else if (labels.includes('documentation')) {
                targetMilestone = milestones.find(m => 
                  m.title.toLowerCase().includes('docs') ||
                  m.title.toLowerCase().includes('documentation')
                );
              }
              
              // Performance improvements
              else if (labels.includes('performance')) {
                targetMilestone = milestones.find(m => 
                  m.title.toLowerCase().includes('performance') ||
                  m.title.toLowerCase().includes('optimization')
                );
              }
              
              // Major features for next major release
              else if (labels.includes('enhancement') && (title.includes('major') || body.includes('breaking'))) {
                targetMilestone = milestones.find(m => 
                  m.title.includes('major') ||
                  m.title.includes('2.0') ||
                  m.title.includes('v2')
                );
              }
              
              // Default to next minor release for other enhancements
              else if (labels.includes('enhancement')) {
                targetMilestone = milestones.find(m => 
                  !m.title.includes('major') && 
                  !m.title.includes('patch') &&
                  !m.title.includes('hotfix')
                );
              }
              
              // If we found a target milestone and it's different from current
              if (targetMilestone && item.milestone?.number !== targetMilestone.number) {
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: item.number,
                  milestone: targetMilestone.number
                });
                
                console.log(`Assigned ${isIssue ? 'issue' : 'PR'} #${item.number} to milestone: ${targetMilestone.title}`);
                
                // Add a comment explaining the assignment
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: item.number,
                  body: `🎯 Automatically assigned to milestone **${targetMilestone.title}** based on labels and priority.`
                });
              }
              
            } catch (error) {
              console.log('Error managing milestones:', error.message);
            }

  create-milestones:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Create upcoming milestones
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            try {
              // Get current milestones
              const { data: existingMilestones } = await github.rest.issues.listMilestones({
                owner,
                repo,
                state: 'all'
              });
              
              const existingTitles = existingMilestones.map(m => m.title);
              
              // Get current version from pyproject.toml or calculate next versions
              const now = new Date();
              const currentVersion = '1.3.0'; // This could be read from pyproject.toml
              
              // Parse current version
              const [major, minor, patch] = currentVersion.split('.').map(Number);
              
              // Define milestones to create
              const milestonesToCreate = [
                {
                  title: `v${major}.${minor}.${patch + 1}`,
                  description: 'Next patch release with bug fixes and minor improvements',
                  due_on: new Date(now.getTime() + 14 * 24 * 60 * 60 * 1000).toISOString() // 2 weeks
                },
                {
                  title: `v${major}.${minor + 1}.0`,
                  description: 'Next minor release with new features',
                  due_on: new Date(now.getTime() + 60 * 24 * 60 * 60 * 1000).toISOString() // 2 months
                },
                {
                  title: `v${major + 1}.0.0`,
                  description: 'Next major release with breaking changes and major features',
                  due_on: new Date(now.getTime() + 180 * 24 * 60 * 60 * 1000).toISOString() // 6 months
                },
                {
                  title: 'Documentation Updates',
                  description: 'Ongoing documentation improvements and updates',
                  due_on: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString() // 1 month
                },
                {
                  title: 'Performance Optimization',
                  description: 'Performance improvements and optimization tasks',
                  due_on: new Date(now.getTime() + 90 * 24 * 60 * 60 * 1000).toISOString() // 3 months
                }
              ];
              
              for (const milestone of milestonesToCreate) {
                if (!existingTitles.includes(milestone.title)) {
                  try {
                    await github.rest.issues.createMilestone({
                      owner,
                      repo,
                      title: milestone.title,
                      description: milestone.description,
                      due_on: milestone.due_on
                    });
                    console.log(`Created milestone: ${milestone.title}`);
                  } catch (error) {
                    console.log(`Error creating milestone ${milestone.title}: ${error.message}`);
                  }
                }
              }
              
            } catch (error) {
              console.error('Error creating milestones:', error);
            }

  milestone-progress:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Report milestone progress
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            try {
              // Get all milestones
              const { data: milestones } = await github.rest.issues.listMilestones({
                owner,
                repo,
                state: 'open'
              });
              
              console.log('📊 Milestone Progress Report:');
              console.log('');
              
              for (const milestone of milestones) {
                const totalIssues = milestone.open_issues + milestone.closed_issues;
                const progress = totalIssues > 0 ? Math.round((milestone.closed_issues / totalIssues) * 100) : 0;
                const dueDate = milestone.due_on ? new Date(milestone.due_on).toLocaleDateString() : 'No due date';
                
                console.log(`🎯 **${milestone.title}**`);
                console.log(`   Progress: ${progress}% (${milestone.closed_issues}/${totalIssues} completed)`);
                console.log(`   Due: ${dueDate}`);
                console.log(`   Open issues: ${milestone.open_issues}`);
                console.log('');
                
                // Check if milestone is overdue
                if (milestone.due_on && new Date(milestone.due_on) < new Date()) {
                  console.log(`⚠️ Milestone "${milestone.title}" is overdue!`);
                }
                
                // Check if milestone is nearly complete
                if (progress >= 90 && milestone.open_issues > 0) {
                  console.log(`🎉 Milestone "${milestone.title}" is nearly complete (${progress}%)!`);
                }
              }
              
              // Auto-close completed milestones
              for (const milestone of milestones) {
                if (milestone.open_issues === 0 && milestone.closed_issues > 0) {
                  await github.rest.issues.updateMilestone({
                    owner,
                    repo,
                    milestone_number: milestone.number,
                    state: 'closed'
                  });
                  console.log(`✅ Auto-closed completed milestone: ${milestone.title}`);
                }
              }
              
            } catch (error) {
              console.error('Error reporting milestone progress:', error);
            } 